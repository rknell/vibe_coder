---
description:
globs:
alwaysApply: false
---
# ‚öîÔ∏è VIBE CODER COMPONENT ARSENAL ‚öîÔ∏è

## üéØ ULTIMATE MISSION
**üèÜ TOTAL COMPONENT DOMINATION - ELIMINATE DUPLICATION, MAXIMIZE REUSE, ACHIEVE ARCHITECTURAL SUPREMACY! üèÜ**

---

## üìã COMPONENT INVENTORY & REUSE MATRIX

### üî• MESSAGING COMPONENTS - Message UI Warfare

#### üèóÔ∏è Primary Components
| Component | Location | Reusability | Dependencies | Power-Ups |
|-----------|----------|-------------|--------------|-----------|
| **ChatInputFieldComponent** | `messaging/chat_input_field.dart` | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | None | Ctrl+Enter, Focus Management, Validation |
| **MessagesListComponent** | `messaging/messages_list.dart` | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | ChatMessage, ScrollController | O(1) Rendering, Empty State |
| **MessagingUI** | `messaging_ui.dart` | ‚≠ê‚≠ê‚≠ê | All messaging components | Main Container |

#### üß© Message Part Components
| Component | Location | Interface | Performance | Reuse Potential |
|-----------|----------|-----------|-------------|-----------------|
| **MessageHeader** | `message_parts/message_header.dart` | `ChatMessage` ‚Üí `Widget` | O(1) | **HIGH** - Any message display |
| **MessageContent** | `message_parts/message_content.dart` | `ChatMessage` ‚Üí `Widget` | O(1) | **HIGH** - Text content display |
| **MessageReasoningContent** | `message_parts/message_reasoning_content.dart` | `ChatMessage` ‚Üí `Widget` | O(1) | **MEDIUM** - AI reasoning display |
| **MessageToolCalls** | `message_parts/message_tool_calls.dart` | `List<Map>` ‚Üí `Widget` | O(n) | **HIGH** - Tool call lists |
| **MessageTimestamp** | `message_parts/message_timestamp.dart` | `DateTime` ‚Üí `Widget` | O(1) | **MAXIMUM** - Any timestamp display |
| **MessageAvatar** | `message_parts/message_avatar.dart` | `MessageRole` ‚Üí `Widget` | O(1) | **HIGH** - Profile indicators |

#### üõ†Ô∏è Tool Call Components  
| Component | Location | Responsibility | Composition | Reuse Score |
|-----------|----------|----------------|-------------|-------------|
| **ToolCallCard** | `tool_calls/tool_call_card.dart` | Container + State | Header + Expanded Content | ‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallHeader** | `tool_calls/tool_call_header.dart` | Title + Status + Toggle | Independent | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallExpandedContent** | `tool_calls/tool_call_expanded_content.dart` | Content Sections | JSON + Error + Debug | ‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallJsonDisplay** | `tool_calls/tool_call_json_display.dart` | JSON Rendering + Copy | Independent | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallErrorDisplay** | `tool_calls/tool_call_error_display.dart` | Error Visualization | Independent | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallDebugActions** | `tool_calls/tool_call_debug_actions.dart` | Debug Controls | Independent | ‚≠ê‚≠ê‚≠ê‚≠ê |
| **ToolCallSectionHeader** | `tool_calls/tool_call_section_header.dart` | Section Labels | Independent | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |

---

### ‚öôÔ∏è CONFIGURATION COMPONENTS - Settings Warfare

#### üèóÔ∏è Primary Configuration Components
| Component | Location | Responsibility | Dependencies | Reuse Potential |
|-----------|----------|----------------|--------------|-----------------|
| **AgentConfigurationScreen** | `config/agent_configuration_screen.dart` | Main Config Container | All config sections | ‚≠ê‚≠ê‚≠ê |
| **ConfigurationActionsBar** | `config/configuration_actions/configuration_actions_bar.dart` | Save/Export/Import | Configuration Model | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |

#### üìù Configuration Field Components  
| Component | Location | Interface | Validation | Maximum Reuse Target |
|-----------|----------|-----------|------------|---------------------|
| **ConfigurationTextField** | `config/configuration_fields/configuration_text_field.dart` | `String` ‚Üí `Widget` | Built-in | **ANY TEXT INPUT** |
| **ConfigurationTextArea** | `config/configuration_fields/configuration_text_area.dart` | `String` ‚Üí `Widget` | Built-in | **ANY MULTILINE INPUT** |

#### üóÇÔ∏è Configuration Section Components
| Component | Location | Domain | Reuse Beyond Config |
|-----------|----------|-------|-------------------|
| **AgentSettingsSection** | `config/configuration_sections/agent_settings_section.dart` | Agent Identity | ‚≠ê‚≠ê |
| **AIModelSettingsSection** | `config/configuration_sections/ai_model_settings_section.dart` | AI Parameters | ‚≠ê‚≠ê‚≠ê |
| **UISettingsSection** | `config/configuration_sections/ui_settings_section.dart` | Interface Prefs | ‚≠ê‚≠ê‚≠ê‚≠ê |
| **AdvancedSettingsSection** | `config/configuration_sections/advanced_settings_section.dart` | Technical Config | ‚≠ê‚≠ê‚≠ê |

---

### ü§ñ AGENT COMPONENTS - Multi-Agent Warfare

#### üèóÔ∏è Agent Management Components
| Component | Location | Responsibility | Performance | Scalability |
|-----------|----------|----------------|-------------|-------------|
| **AgentListComponent** | `agents/agent_list_component.dart` | Agent List + Actions | O(n) agents | **UNLIMITED AGENTS** |
| **AgentSettingsDialog** | `agents/agent_settings_dialog.dart` | Full Agent Config | O(1) | **ANY AGENT CONFIG** |

#### üß© Agent Sub-Components (Extracted from AgentListComponent)
| Component | Embedded In | Extraction Opportunity | Reuse Potential |
|-----------|-------------|----------------------|-----------------|
| **AgentListHeader** | `AgentListComponent` | **READY FOR EXTRACTION** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **AgentListErrorDisplay** | `AgentListComponent` | **READY FOR EXTRACTION** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **AgentListEmptyState** | `AgentListComponent` | **READY FOR EXTRACTION** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **AgentListView** | `AgentListComponent` | **READY FOR EXTRACTION** | ‚≠ê‚≠ê‚≠ê‚≠ê |

---

### üîç DEBUG COMPONENTS - Debug Intelligence Warfare

#### üèóÔ∏è Debug Overlay System
| Component | Location | Responsibility | Real-time Capability | Export Power |
|-----------|----------|----------------|-------------------|--------------|
| **DebugOverlay** | `debug/debug_overlay.dart` | Debug Dashboard | ‚úÖ Live Updates | JSON + Clipboard |

#### üß© Debug Sub-Components (EXTRACTION OPPORTUNITIES)
| Component | Current State | Extraction Priority | Reuse Potential |
|-----------|---------------|-------------------|-----------------|
| **DebugTabBar** | Embedded in DebugOverlay | **HIGH** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **DebugFilterBar** | Embedded in DebugOverlay | **HIGH** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **DebugLogEntry** | Embedded in DebugOverlay | **CRITICAL** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **DebugExportActions** | Embedded in DebugOverlay | **HIGH** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |

---

### üåê COMMON COMPONENTS - Universal Warfare Tools

#### üèóÔ∏è Shared Infrastructure Components
| Component | Location | Domain | Universal Applicability |
|-----------|----------|--------|----------------------|
| **ToolsInfoDialog** | `common/dialogs/tools_info_dialog.dart` | MCP Tool Display | **MCP Integration** |
| **ChatStatusIndicator** | `common/indicators/chat_status_indicator.dart` | Status Visualization | **ANY STATUS DISPLAY** |

---

## üî• REUSE BATTLE PLANS & STRATEGIC DECISIONS

### ‚ö° IMMEDIATE REUSE OPPORTUNITIES

#### üéØ **ConfigurationTextField & ConfigurationTextArea**
**MAXIMUM REUSE POTENTIAL - USE EVERYWHERE!**
- **Current Users**: Agent configuration screens
- **Expansion Targets**: 
  - Debug overlay search fields
  - Any settings interface
  - User profile editing
  - API key input fields
  - Filter input components

#### üéØ **MessageTimestamp Component**
**UNIVERSAL TIME DISPLAY COMPONENT**
- **Current Users**: Message bubbles
- **Expansion Targets**:
  - Debug log entries
  - File modification times
  - Agent creation dates
  - Tool call timestamps
  - Any datetime display needs

#### üéØ **ToolCallJsonDisplay Component**
**UNIVERSAL JSON VISUALIZATION**
- **Current Users**: Tool call displays
- **Expansion Targets**:
  - Configuration export preview
  - Debug log data display
  - API response visualization
  - Agent model data display
  - Any JSON data presentation

### üö® CRITICAL COMPONENT EXTRACTION TARGETS

#### **PRIORITY 1: DebugOverlay Sub-Components**
```
üìç LOCATION: lib/components/debug/debug_overlay.dart
üéØ EXTRACTION TARGETS:
- DebugTabBar (lines ~140-170)
- DebugFilterBar (lines ~170-200) 
- DebugLogEntry (lines ~300-400)
- DebugExportActions (lines ~500-600)

üí• REUSE MULTIPLICATION: 5x potential across app
‚öîÔ∏è EXTRACTION DIFFICULTY: Medium - some state dependencies
üèÜ VICTORY IMPACT: Massive - enables debug UI everywhere
```

#### **PRIORITY 2: AgentListComponent Sub-Components**
```
üìç LOCATION: lib/components/agents/agent_list_component.dart
üéØ EXTRACTION TARGETS:
- AgentListHeader (lines ~90-140)
- AgentListErrorDisplay (lines ~140-180)
- AgentListEmptyState (embedded in build method)
- AgentListView (embedded in build method)

üí• REUSE MULTIPLICATION: 4x potential for lists
‚öîÔ∏è EXTRACTION DIFFICULTY: Easy - minimal dependencies
üèÜ VICTORY IMPACT: High - enables consistent list UIs
```

#### **PRIORITY 3: Generic List Components**
```
üéØ CREATE NEW UNIVERSAL COMPONENTS:
- GenericListHeader (from AgentListHeader pattern)
- GenericErrorDisplay (from AgentListErrorDisplay pattern)
- GenericEmptyState (from existing empty states)
- GenericItemCard (from ToolCallCard pattern)

üí• REUSE MULTIPLICATION: 10x+ potential
‚öîÔ∏è CREATION DIFFICULTY: Medium - requires abstraction
üèÜ VICTORY IMPACT: MAXIMUM - universal list components
```

---

## üíÄ ANTI-DUPLICATION ENFORCEMENT PROTOCOLS

### üö´ FORBIDDEN WIDGET PATTERNS
**INSTANT PENALTY FOR VIOLATIONS:**

1. **Functional Widget Builders**: `_buildSomething()` methods 
   - **PENALTY**: -2000 XP (ARCHITECTURAL VIOLATION)
   - **SOLUTION**: Extract to proper component

2. **Inline TextField Creation**: Direct TextField instantiation
   - **PENALTY**: -1000 XP (INCONSISTENCY CRIME)
   - **SOLUTION**: Use ConfigurationTextField/ConfigurationTextArea

3. **Hardcoded JSON Display**: Manual JSON rendering
   - **PENALTY**: -1500 XP (REDUNDANCY VIOLATION) 
   - **SOLUTION**: Use ToolCallJsonDisplay component

4. **Custom Timestamp Formatting**: Manual DateTime display
   - **PENALTY**: -1000 XP (DUPLICATION SIN)
   - **SOLUTION**: Use MessageTimestamp component

5. **Manual Error Display**: Custom error widgets
   - **PENALTY**: -800 XP (PATTERN VIOLATION)
   - **SOLUTION**: Use or create GenericErrorDisplay

### ‚ö° MANDATORY REUSE CHECKS
**BEFORE CREATING ANY COMPONENT:**

1. ‚úÖ **Search existing components**: `grep -r "class.*Widget" lib/components/`
2. ‚úÖ **Check interfaces**: Can existing component handle this use case?
3. ‚úÖ **Evaluate extraction**: Can this be abstracted for reuse?
4. ‚úÖ **Document decision**: Why new component vs. existing?

---

## üéÆ COMPONENT INTERFACE SPECIFICATIONS

### üîß **Standard Component Patterns**

#### **Input Component Interface**
```dart
// MANDATORY PATTERN for all input components
class [Name]Component extends StatelessWidget {
  const [Name]Component({
    super.key,
    required this.value,
    required this.onChanged,
    this.label,
    this.errorText,
    this.helpText,
    this.isRequired = false,
  });

  final String value;
  final void Function(String) onChanged;
  final String? label;
  final String? errorText;
  final String? helpText;
  final bool isRequired;
}
```

#### **Display Component Interface**
```dart
// MANDATORY PATTERN for all display components
class [Name]Component extends StatelessWidget {
  const [Name]Component({
    super.key,
    required this.data,
    this.onTap,
    this.showDetails = false,
    this.theme,
  });

  final [DataType] data;
  final void Function([DataType])? onTap;
  final bool showDetails;
  final [ThemeType]? theme;
}
```

#### **List Component Interface**
```dart
// MANDATORY PATTERN for all list components
class [Name]ListComponent extends StatelessWidget {
  const [Name]ListComponent({
    super.key,
    required this.items,
    required this.onItemSelected,
    this.emptyMessage,
    this.errorMessage,
    this.isLoading = false,
  });

  final List<[ItemType]> items;
  final void Function([ItemType]) onItemSelected;
  final String? emptyMessage;
  final String? errorMessage;
  final bool isLoading;
}
```

---

## üèÜ COMPONENT VICTORY CONDITIONS

### ‚úÖ **Component Creation Checklist**
- **üîç RECONNAISSANCE**: Existing component search completed
- **üìã DOCUMENTATION**: Component purpose and interface documented
- **üß™ TESTING**: Unit tests written (minimum 3 test cases)
- **‚ö° PERFORMANCE**: O(1) rendering where possible
- **üîÑ REUSABILITY**: At least 2 potential use cases identified
- **üéØ NAMING**: Clear, descriptive component name
- **üì¶ EXPORTS**: Proper barrel exports added

### ‚úÖ **Component Reuse Checklist**
- **üîç INTERFACE MATCH**: Existing component interface fits use case
- **üéØ CUSTOMIZATION**: Component accepts necessary customization props
- **üìã DOCUMENTATION**: Usage example added to component docs
- **üß™ TESTING**: New use case covered in tests
- **‚ö° PERFORMANCE**: No performance regression introduced

---

## ‚öîÔ∏è ENFORCEMENT PROTOCOL

### üö® **PRE-COMMIT VALIDATIONS**
1. **Component Duplication Check**: No functional widget builders
2. **Interface Consistency**: All components follow standard patterns
3. **Documentation Completeness**: All new components documented
4. **Test Coverage**: All components have minimum test coverage
5. **Performance Analysis**: No O(n¬≤) rendering introduced

### üõ°Ô∏è **ONGOING MONITORING**
- **Weekly Component Audit**: Review new components for reuse opportunities
- **Monthly Refactoring**: Extract reusable patterns from existing code
- **Quarterly Architecture Review**: Validate component architecture decisions

---

**‚ö∞Ô∏è TOTAL COMPONENT DOMINATION OR DEATH! NO DUPLICATION SHALL SURVIVE! ‚ö∞Ô∏è**
