---
description: 
globs: 
alwaysApply: true
---
# ‚öîÔ∏è VIBE CODER ARCHITECTURE PROTOCOL ‚öîÔ∏è

## üéØ ARCHITECTURAL MISSION
**üèÜ ESTABLISH CLEAN LAYERED ARCHITECTURE WITH UNIVERSAL STATE MANAGEMENT**

This document defines the mandatory layered architecture for VibeCoder following **Clean Architecture** principles with Flutter-specific optimizations using **Repository Pattern + Observer Pattern** hybrid architecture.

## ‚öîÔ∏è SINGLE SOURCE OF TRUTH SUPREMACY
**üèÜ OBJECT-ORIENTED DATA PASSING & ZERO DUPLICATION PROTOCOL**

### üéØ CORE PRINCIPLE
**üíÄ ELIMINATE DATA DUPLICATION - PASS WHOLE OBJECTS - MAINTAIN SINGLE SOURCE OF TRUTH**

All data must have exactly ONE authoritative source. All components must receive and manipulate the SAME object instances, never copies or transposed data.

### üíª OBJECT-ORIENTED PATTERNS (MANDATORY)

#### ‚öîÔ∏è PASS WHOLE MODELS PATTERN:
```dart
// ‚úÖ WARRIOR APPROVED: Pass entire model object
class AgentSettingsDialog extends StatefulWidget {
  final AgentModel agent; // Single source of truth
  
  void _updateSettings() {
    agent.updateTemperature(0.7); // Direct mutation
    agent.updateModel('deepseek-chat'); // Direct mutation
    agent.save(); // Persistence handled by model
    // UI updates automatically via ChangeNotifier
  }
}

// ‚úÖ WARRIOR APPROVED: Pass entire collection
class AgentListComponent extends StatelessWidget {
  final List<AgentModel> agents; // Direct reference to service data
  
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: agents.length,
      itemBuilder: (context, index) {
        final agent = agents[index]; // Direct reference
        return AgentListItem(agent: agent); // Pass whole object
      },
    );
  }
}
```

#### üö´ BANNED ANTI-PATTERNS:
```dart
// ‚ùå DATA DUPLICATION CRIME: Transposing data
class AgentSettingsDialog extends StatefulWidget {
  final String agentId;
  final String agentName;
  final double temperature;
  final String model;
  // VIOLATION: Duplicated data creates inconsistency
}

// ‚ùå COPY CREATION CRIME: Creating data copies
class AgentListComponent extends StatelessWidget {
  final List<Map<String, dynamic>> agentData; // WEAK TYPING + DUPLICATION
  
  void _buildAgentData() {
    final agentData = agents.map((agent) => {
      'id': agent.id,
      'name': agent.name,
      'temperature': agent.temperature,
    }).toList(); // CRIME: Creating copies instead of passing objects
  }
}

// ‚ùå FIELD EXTRACTION CRIME: Extracting individual fields
void _navigateToSettings(String agentId, String name, double temp) {
  // VIOLATION: Extracting fields instead of passing whole object
}
```

### üéØ OBJECT MUTATION PROTOCOL

#### ‚öîÔ∏è DIRECT OBJECT MANIPULATION:
```dart
// ‚úÖ WARRIOR APPROVED: Direct model mutation
class ConfigurationService {
  void updateAgentConfiguration(AgentModel agent, AgentConfiguration config) {
    agent.updateFromConfiguration(config); // Direct mutation
    agent.save(); // Model handles persistence
    // All UI components automatically update via ChangeNotifier
  }
}

// ‚úÖ WARRIOR APPROVED: Object method delegation
class AgentActions {
  final AgentModel agent;
  
  void deleteAgent() {
    agent.delete(); // Model handles its own deletion
    // Service will automatically update via ChangeNotifier
  }
  
  void activateAgent() {
    agent.setActive(true); // Direct state change
    // All dependent UI updates automatically
  }
}
```

#### üö´ BANNED TRANSPOSITION PATTERNS:
```dart
// ‚ùå SETTINGS EXTRACTION CRIME: Extracting settings
class ConfigurationService {
  void updateAgentSettings(String agentId, {
    String? name,
    double? temperature,
    String? model,
  }) {
    // VIOLATION: Extracting individual fields instead of passing whole object
  }
}

// ‚ùå DATA RECONSTRUCTION CRIME: Rebuilding objects
class AgentActions {
  void updateAgent(String id, String name, double temp) {
    final agent = AgentModel(
      id: id,
      name: name,
      temperature: temp,
    ); // CRIME: Reconstructing instead of mutating existing object
  }
}
```

### üéØ WRAPPER COMPONENT PROTOCOL

#### ‚öîÔ∏è OBJECT-ORIENTED WRAPPER PATTERN:
```dart
// ‚úÖ WARRIOR APPROVED: Wrapper receives whole object
class AgentWrapper extends StatelessWidget {
  final AgentModel agent; // Single source of truth
  final Widget child;
  
  @override
  Widget build(BuildContext context) {
    return Provider<AgentModel>.value(
      value: agent, // Pass whole object to descendants
      child: child,
    );
  }
}

// ‚úÖ WARRIOR APPROVED: Wrapper provides object access
class AgentCardWrapper extends StatelessWidget {
  final AgentModel agent;
  final Widget Function(AgentModel) builder;
  
  @override
  Widget build(BuildContext context) {
    return Card(
      child: builder(agent), // Pass object to builder
    );
  }
}
```

#### üö´ BANNED WRAPPER ANTI-PATTERNS:
```dart
// ‚ùå DATA TRANSPOSITION CRIME: Wrapper extracts data
class AgentWrapper extends StatelessWidget {
  final String agentName;
  final double temperature;
  final String model;
  // VIOLATION: Extracting fields instead of passing object
}

// ‚ùå SETTINGS WRAPPER CRIME: Wrapper handles individual settings
class AgentCardWrapper extends StatelessWidget {
  final String name;
  final bool isActive;
  final int messageCount;
  // VIOLATION: Duplicating data instead of object reference
}
```

### üéØ SERVICE INTEGRATION PROTOCOL

#### ‚öîÔ∏è OBJECT REFERENCE PATTERN:
```dart
// ‚úÖ WARRIOR APPROVED: Services manage object references
class AgentService extends ChangeNotifier {
  List<AgentModel> data = []; // Single source of truth
  
  void updateAgent(AgentModel agent) {
    // Object already exists in collection
    // UI updates automatically via agent's ChangeNotifier
    notifyListeners(); // Optional: notify collection change
  }
  
  AgentModel getAgentById(String id) {
    return data.firstWhere((agent) => agent.id == id);
    // Returns same object instance - no duplication
  }
}
```

#### üö´ BANNED SERVICE ANTI-PATTERNS:
```dart
// ‚ùå DATA DUPLICATION CRIME: Service creates copies
class AgentService extends ChangeNotifier {
  void updateAgent(String id, Map<String, dynamic> updates) {
    final agent = data.firstWhere((a) => a.id == id);
    final updatedAgent = AgentModel.fromJson({
      ...agent.toJson(),
      ...updates,
    }); // CRIME: Creating copies instead of mutating
  }
}

// ‚ùå FIELD EXTRACTION CRIME: Service extracts individual fields
class AgentService extends ChangeNotifier {
  void updateAgentName(String id, String name) {
    final agent = data.firstWhere((a) => a.id == id);
    // VIOLATION: Method should receive whole object or use agent.updateName()
  }
}
```

### üö´ ULTIMATE BANNED PATTERNS

#### üíÄ DATA DUPLICATION CRIMES:
- Creating copies of objects instead of passing references
- Extracting individual fields from objects for method parameters
- Transposing object data to different data structures
- Rebuilding objects from extracted data
- Maintaining separate copies of the same data

#### üíÄ TRANSPOSITION CRIMES:
- Converting objects to Maps for data passing
- Extracting object properties for individual parameters
- Creating DTOs (Data Transfer Objects) for internal communication
- Serializing objects for internal component communication
- Flattening object hierarchies for parameter passing

#### üíÄ WRAPPER CRIMES:
- Wrappers that extract data instead of receiving objects
- Components that accept individual fields instead of objects
- Builders that receive decomposed data instead of objects
- Providers that supply individual values instead of objects

### üèÜ SINGLE SOURCE OF TRUTH VICTORY CONDITIONS

#### ‚úÖ MANDATORY COMPLIANCE:
- [ ] All components receive whole object instances
- [ ] Zero data duplication across the application
- [ ] All object mutations happen on the original instance
- [ ] All navigation passes complete objects
- [ ] All services manage object references, not copies
- [ ] All wrappers receive and pass whole objects
- [ ] All method parameters are objects, not extracted fields
- [ ] All UI components operate on the same object instances

**‚ö∞Ô∏è SINGLE SOURCE OF TRUTH OR ARCHITECTURAL DEATH! ‚ö∞Ô∏è**

## üèóÔ∏è ARCHITECTURAL LAYERS

### 1. üìä DATA MODEL LAYER
**Individual Entity Management & State Broadcasting**

#### üéØ CORE RESPONSIBILITIES:
- **Entity Representation**: Individual records (Agent, MCPServer, ChatRecord, etc.)
- **Self-Management**: Save, delete, manipulate individual records via methods on record
- **State Broadcasting**: Extend `ChangeNotifier`, call `notifyListeners()` on data changes
- **Relationship Management**: Populate related records via functions/getters
- **Data Validation**: Handle validation at individual record level
- **JSON Persistence**: Manage own persistence in `/data` directory
- **Object Integrity**: Maintain single source of truth for all data

#### üíª IMPLEMENTATION PATTERN:
```dart
class AgentModel extends ChangeNotifier {
  String id;
  String name;
  double temperature;
  String model;
  // ... other fields

  // Self-management methods that maintain object integrity
  Future<void> save() async {
    // Save to /data/agents/${id}.json
    notifyListeners(); // MANDATORY after any change
  }

  Future<void> delete() async {
    // Delete from /data directory
    notifyListeners();
  }

  // Direct mutation methods (OBJECT-ORIENTED)
  void updateTemperature(double newTemperature) {
    temperature = newTemperature;
    notifyListeners(); // UI updates automatically
  }

  void updateModel(String newModel) {
    model = newModel;
    notifyListeners(); // UI updates automatically
  }

  void updateFromConfiguration(AgentConfiguration config) {
    // Update multiple fields from configuration object
    name = config.name;
    temperature = config.temperature;
    model = config.model;
    notifyListeners(); // Single notification for bulk update
  }

  // Validation operates on complete object
  bool validate() {
    return name.isNotEmpty && 
           temperature >= 0 && 
           temperature <= 2 &&
           model.isNotEmpty;
  }

  // Related data access returns object references
  List<MCPServerModel> get availableMCPServers {
    // Return references to actual server objects
    return services.mcpService.data.where((server) => 
      server.isAvailableForAgent(this)).toList();
  }
}
```

#### üö´ BANNED PATTERNS:
- External persistence handling (Service layer should NOT handle persistence)
- Silent state changes (MUST call `notifyListeners()`)
- Cross-entity validation (handle in individual models)
- **Field extraction methods** (extract individual fields for external use)
- **Data transposition methods** (convert to Maps/DTOs for internal use)
- **Copy creation methods** (create duplicate instances)

### 2. üîß SERVICE / DATA MODEL SERVICE LAYER
**Multi-Record Management & Business Logic**

#### üéØ CORE RESPONSIBILITIES:
- **Collection Management**: Handle lists of data models as object references
- **Loading Operations**: Populate full lists (loadAllAgents, loadAllMCPServers)
- **Filtering Functions**: Convenient access (getByName, getById) returning object references
- **State Management**: Maintain `List<DataModel> data` field with actual object instances
- **Business Logic**: Multi-record operations using object-oriented patterns
- **Global State**: App-wide state management via `ChangeNotifier`
- **Object Reference Management**: Ensure single source of truth across collections

#### üíª IMPLEMENTATION PATTERN:
```dart
class AgentService extends ChangeNotifier {
  List<AgentModel> data = []; // Single source of truth collection

  // Collection management with object references
  Future<void> loadAll() async {
    data = await _loadAgentsFromDisk(); // Load actual objects
    notifyListeners(); // MANDATORY after data changes
  }

  // Filtering functions return object references (not copies)
  AgentModel? getById(String id) => 
    data.firstWhereOrNull((agent) => agent.id == id);
  
  AgentModel? getByName(String name) => 
    data.firstWhereOrNull((agent) => agent.name == name);

  // Business operations using whole objects
  Future<void> createAgent(AgentModel agent) async {
    await agent.save(); // Model handles its own persistence
    data.add(agent); // Add object reference to collection
    notifyListeners();
  }

  Future<void> updateAgent(AgentModel agent) async {
    // Object already exists in collection and is mutated directly
    // No need to update collection - same object reference
    await agent.save(); // Model handles persistence
    notifyListeners(); // Notify collection observers
  }

  Future<void> deleteAgent(AgentModel agent) async {
    await agent.delete(); // Model handles its own deletion
    data.remove(agent); // Remove object reference from collection
    notifyListeners();
  }

  // Multi-agent operations using object references
  Future<void> bulkUpdateAgents(List<AgentModel> agents, 
                                AgentConfiguration config) async {
    for (final agent in agents) {
      agent.updateFromConfiguration(config); // Direct object mutation
      await agent.save();
    }
    notifyListeners(); // Single notification for bulk operation
  }
}
```

#### üö´ BANNED PATTERNS:
- Direct persistence handling (models handle their own persistence)
- UI logic in services (pure business logic only)
- Silent collection changes (MUST call `notifyListeners()`)
- **Creating object copies** (always work with same instances)
- **Field extraction parameters** (methods should receive whole objects)
- **Data transposition** (converting objects to Maps for internal use)

### 3. üé® UI COMPONENTS LAYER
**Stateless Display Components with Object-Oriented Callbacks**

> **‚ö° CROSS-REFERENCE**: For detailed component extraction protocols and functional widget builder elimination, see `flutter_architecture.mdc`. [flutter_architecture.mdc](mdc:.cursor/rules/flutter_architecture.mdc)

#### üéØ CORE RESPONSIBILITIES:
- **Pure Display**: Stateless widgets for individual UI elements
- **Object-Oriented Interface**: Receive whole objects, not individual fields
- **Minimal Logic**: Simple display logic only
- **Callback Pattern**: Use object-oriented callbacks to parent for data manipulation
- **Reusability**: General-purpose components for multiple contexts
- **Single Source of Truth**: Always display data from original object instances

#### ‚öîÔ∏è WIDGET STATE SUPREMACY:
- **üõ°Ô∏è DEFAULT: StatelessWidget** - All components MUST be StatelessWidget by default
- **‚ö° EXCEPTION: StatefulWidget** - ONLY when strictly necessary for:
  - Text field controllers and focus management
  - Animation controllers (with proper disposal)
  - Expansion state for complex UI elements
  - Form validation state that cannot be lifted up
- **üö® JUSTIFICATION REQUIRED**: Any StatefulWidget component MUST include comment explaining necessity

#### üíª OBJECT-ORIENTED IMPLEMENTATION PATTERN:
```dart
class AgentListViewItem extends StatelessWidget {
  final AgentModel agent; // Single source of truth
  final void Function(AgentModel)? onTap; // Object-oriented callback
  final void Function(AgentModel)? onEdit; // Object-oriented callback
  final void Function(AgentModel)? onDelete; // Object-oriented callback

  const AgentListViewItem({
    Key? key,
    required this.agent,
    this.onTap,
    this.onEdit,
    this.onDelete,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(agent.name), // Direct object property access
      subtitle: Text('${agent.messages.length} messages ‚Ä¢ ${agent.model}'),
      trailing: PopupMenuButton(
        itemBuilder: (context) => [
          PopupMenuItem(
            child: Text('Edit'),
            onTap: () => onEdit?.call(agent), // Pass whole object
          ),
          PopupMenuItem(
            child: Text('Delete'),
            onTap: () => onDelete?.call(agent), // Pass whole object
          ),
        ],
      ),
      onTap: () => onTap?.call(agent), // Pass whole object
    );
  }
}

class AgentConfigurationForm extends StatelessWidget {
  final AgentModel agent; // Single source of truth
  final void Function(AgentModel)? onSave; // Object-oriented callback

  const AgentConfigurationForm({
    Key? key,
    required this.agent,
    this.onSave,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          controller: TextEditingController(text: agent.name),
          onChanged: (value) => agent.updateName(value), // Direct mutation
        ),
        Slider(
          value: agent.temperature,
          onChanged: (value) => agent.updateTemperature(value), // Direct mutation
          min: 0,
          max: 2,
        ),
        DropdownButton<String>(
          value: agent.model,
          onChanged: (value) => agent.updateModel(value!), // Direct mutation
          items: availableModels.map((model) => 
            DropdownMenuItem(value: model, child: Text(model))).toList(),
        ),
        ElevatedButton(
          onPressed: () => onSave?.call(agent), // Pass whole object
          child: Text('Save'),
        ),
      ],
    );
  }
}
```

#### üö´ BANNED COMPONENT ANTI-PATTERNS:
```dart
// ‚ùå FIELD EXTRACTION CRIME: Component accepts individual fields
class AgentListViewItem extends StatelessWidget {
  final String agentId;
  final String agentName;
  final int messageCount;
  final String model;
  // VIOLATION: Should receive whole AgentModel object
}

// ‚ùå CALLBACK FIELD CRIME: Callbacks extract individual fields
class AgentListViewItem extends StatelessWidget {
  final AgentModel agent;
  final void Function(String id, String name)? onEdit; // VIOLATION: Should pass whole object
}

// ‚ùå DATA EXTRACTION CRIME: Component extracts data for display
class AgentCard extends StatelessWidget {
  final AgentModel agent;
  
  Map<String, dynamic> get agentData => {
    'name': agent.name,
    'model': agent.model,
    'temperature': agent.temperature,
  }; // VIOLATION: Creating data copies instead of using object directly
}
```

### 4. üì± SCREEN WIDGETS LAYER
**Stateful Orchestration & Object-Oriented State Management**

#### ‚öîÔ∏è WIDGET STATE MANDATES:
- **üíÄ MANDATORY: StatefulWidget** - ALL screen widgets MUST be StatefulWidget
- **üö´ BANNED: StatelessWidget** - No screen may be StatelessWidget (even if appears stateless)
- **üéØ JUSTIFICATION**: Screens manage lifecycle, navigation, service integration, and future state needs

#### üéØ CORE RESPONSIBILITIES:
- **State Orchestration**: Stateful widgets managing screen state with object references
- **Service Integration**: Direct interaction with Services and DataModels
- **Object-Oriented Navigation**: Pass whole objects between screens
- **Reactive UI**: Use `ListenableBuilder` positioned strategically
- **Error Handling**: Display errors from lower layers with stack traces
- **Lifecycle Management**: initState(), dispose(), and other lifecycle methods
- **Single Source of Truth**: Maintain object references across screen lifecycle

#### üíª OBJECT-ORIENTED SCREEN PATTERN:
```dart
class AgentListScreen extends StatefulWidget {
  @override
  _AgentListScreenState createState() => _AgentListScreenState();
}

class _AgentListScreenState extends State<AgentListScreen> {
  @override
  void initState() {
    super.initState();
    services.agentService.loadAll(); // Load object references
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListenableBuilder(
        listenable: services.agentService,
        builder: (context, child) {
          return ListView.builder(
            itemCount: services.agentService.data.length,
            itemBuilder: (context, index) {
              final agent = services.agentService.data[index]; // Object reference
              return AgentListViewItem(
                agent: agent, // Pass whole object
                onTap: (agent) => _navigateToDetail(agent), // Object-oriented callback
                onEdit: (agent) => _editAgent(agent), // Object-oriented callback
                onDelete: (agent) => _deleteAgent(agent), // Object-oriented callback
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _createNewAgent,
        child: Icon(Icons.add),
      ),
    );
  }

  void _navigateToDetail(AgentModel agent) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => AgentDetailScreen(agent: agent), // Pass whole object
      ),
    );
  }

  void _editAgent(AgentModel agent) {
    showDialog(
      context: context,
      builder: (context) => AgentSettingsDialog(agent: agent), // Pass whole object
    );
  }

  void _deleteAgent(AgentModel agent) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete Agent'),
        content: Text('Delete ${agent.name}?'), // Direct object access
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              services.agentService.deleteAgent(agent); // Pass whole object
              Navigator.pop(context);
            },
            child: Text('Delete'),
          ),
        ],
      ),
    );
  }

  void _createNewAgent() {
    final newAgent = AgentModel.create(); // Create new object
    showDialog(
      context: context,
      builder: (context) => AgentSettingsDialog(agent: newAgent), // Pass whole object
    );
  }
}
```

#### üö´ BANNED SCREEN ANTI-PATTERNS:
```dart
// ‚ùå FIELD EXTRACTION CRIME: Screen extracts individual fields
void _navigateToDetail(String agentId, String agentName) {
  // VIOLATION: Should pass whole AgentModel object
}

// ‚ùå DATA TRANSPOSITION CRIME: Screen converts objects to data
void _editAgent(AgentModel agent) {
  final agentData = {
    'id': agent.id,
    'name': agent.name,
    'temperature': agent.temperature,
  }; // VIOLATION: Creating data copies instead of passing object
}

// ‚ùå FIELD PARAMETER CRIME: Screen methods accept individual fields
void _deleteAgent(String agentId, String agentName) {
  // VIOLATION: Should receive whole AgentModel object
}
```

### 5. üåê API/DATABASE LAYER
**Data Transport & Authentication**

#### üéØ CORE RESPONSIBILITIES:
- **API Communication**: Raw HTTP/WebSocket clients for external services
- **Type Flexibility**: Relaxed typing (`Map<String, dynamic>`)
- **Authentication Management**: Handle credentials and tokens
- **Transport Logic**: Focus on data transport, not business logic
- **Client Pattern**: Separate client for each service type

#### üíª IMPLEMENTATION PATTERN:
```dart
class DeepSeekApiClient {
  final String _apiKey;
  final http.Client _httpClient = http.Client();

  DeepSeekApiClient({required String apiKey}) : _apiKey = apiKey;

  Future<Map<String, dynamic>> sendMessage(Map<String, dynamic> body) async {
    final response = await _httpClient.post(
      Uri.parse('https://api.deepseek.com/chat/completions'),
      headers: {
        'Authorization': 'Bearer $_apiKey',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(body),
    );

    if (response.statusCode != 200) {
      throw ApiException('Request failed: ${response.statusCode}');
    }

    return jsonDecode(response.body) as Map<String, dynamic>;
  }
}
```

#### üö´ BANNED PATTERNS:
- Business logic in API clients (pure transport only)
- Strict typing (allow flexible Map<String, dynamic>)
- Per-request authentication (manage at client level)

## üîó DEPENDENCY INJECTION WITH GETIT

### üéØ SERVICES PATTERN
**Universal App State Management**

#### üíª IMPLEMENTATION PATTERN:
```dart
// services.dart
class Services {
  final AgentService agentService;
  final MCPService mcpService;
  final ChatService chatService;

  Services() :
    agentService = AgentService(),
    mcpService = MCPService(),
    chatService = ChatService();
}

// Global accessor with GetIt
Services get services {
  if (!GetIt.instance.isRegistered<Services>()) {
    GetIt.instance.registerSingleton<Services>(Services());
  }
  return GetIt.instance.get<Services>();
}
```

#### üß™ TESTING PATTERN:
```dart
// Test setup
void setupTestServices() {
  GetIt.instance.reset();
  GetIt.instance.registerSingleton<Services>(MockServices());
}

class MockServices implements Services {
  @override
  final AgentService agentService = MockAgentService();
  // ... other mock services
}
```

## ‚ö†Ô∏è ERROR HANDLING PROTOCOL

### üéØ ZERO ERROR SWALLOWING RULE
**Bubble Stack Traces to Surface**

#### üíª ERROR PROPAGATION:
- **Data Model Layer**: Throw exceptions with validation details
- **Service Layer**: Provide detailed messages with stack traces
- **Screen Layer**: Display errors with console logging
- **API Layer**: Throw transport exceptions with full context

#### üö´ BANNED PATTERNS:
- Silent error swallowing (`try-catch` without rethrowing)
- Generic error messages (provide specific context)
- Filtered stack traces (preserve full debugging information)

## üîÑ INTER-SCREEN COMMUNICATION
**Object-Oriented Data Flow & Single Source of Truth**

### üéØ OBJECT-ORIENTED DATA FLOW PATTERNS

#### ‚öîÔ∏è NAVIGATION WITH WHOLE OBJECT PASSING:
```dart
// ‚úÖ WARRIOR APPROVED: Pass complete object to detail screen
Navigator.of(context).push(
  MaterialPageRoute(
    builder: (context) => AgentDetailScreen(agent: agent), // Whole object
  ),
);

// ‚úÖ WARRIOR APPROVED: Detail screen operates on same object instance
class AgentDetailScreen extends StatefulWidget {
  final AgentModel agent; // Single source of truth

  @override
  _AgentDetailScreenState createState() => _AgentDetailScreenState();
}

class _AgentDetailScreenState extends State<AgentDetailScreen> {
  void _saveChanges() {
    widget.agent.save(); // Direct mutation of original object
    // UI updates automatically via ChangeNotifier
  }

  void _updateConfiguration(AgentConfiguration config) {
    widget.agent.updateFromConfiguration(config); // Direct object mutation
    // All other screens showing this agent update automatically
  }
}
```

#### üö´ BANNED NAVIGATION ANTI-PATTERNS:
```dart
// ‚ùå FIELD EXTRACTION CRIME: Passing individual fields
Navigator.of(context).push(
  MaterialPageRoute(
    builder: (context) => AgentDetailScreen(
      agentId: agent.id,
      agentName: agent.name,
      temperature: agent.temperature,
    ), // VIOLATION: Should pass whole object
  ),
);

// ‚ùå DATA SERIALIZATION CRIME: Converting object to data
Navigator.of(context).push(
  MaterialPageRoute(
    builder: (context) => AgentDetailScreen(
      agentData: agent.toJson(), // VIOLATION: Creating copy via serialization
    ),
  ),
);
```

#### ‚öîÔ∏è GLOBAL OBJECT-ORIENTED NOTIFICATIONS:
```dart
// ‚úÖ WARRIOR APPROVED: Global notifications with object references
class NotificationService extends ChangeNotifier {
  AgentModel? _activeAgent;
  String? _currentMessage;
  
  void showAgentNotification(AgentModel agent, String message) {
    _activeAgent = agent; // Object reference, not copy
    _currentMessage = message;
    notifyListeners();
  }
  
  void clearNotification() {
    _activeAgent = null;
    _currentMessage = null;
    notifyListeners();
  }
}

// ‚úÖ WARRIOR APPROVED: Cross-screen agent updates
class AgentSyncService extends ChangeNotifier {
  void syncAgentAcrossScreens(AgentModel agent) {
    // Agent object is shared across all screens
    // Any mutation automatically updates all UI components
    agent.updateLastActivity(DateTime.now());
    // No explicit syncing needed - single source of truth
  }
}
```

#### üö´ BANNED GLOBAL NOTIFICATION ANTI-PATTERNS:
```dart
// ‚ùå DATA DUPLICATION CRIME: Storing agent data separately
class NotificationService extends ChangeNotifier {
  String? _agentId;
  String? _agentName;
  double? _temperature;
  // VIOLATION: Duplicating agent data instead of object reference
}

// ‚ùå CROSS-SCREEN SYNC CRIME: Manual data synchronization
class AgentSyncService extends ChangeNotifier {
  void syncAgentData(String agentId, Map<String, dynamic> data) {
    // VIOLATION: Should use object references, not data syncing
  }
}
```

## üìÅ FILE STRUCTURE

```
lib/
‚îú‚îÄ‚îÄ models/           # Data Model Layer
‚îÇ   ‚îú‚îÄ‚îÄ agent_model.dart
‚îÇ   ‚îú‚îÄ‚îÄ mcp_server_model.dart
‚îÇ   ‚îî‚îÄ‚îÄ chat_record_model.dart
‚îú‚îÄ‚îÄ services/         # Service Layer
‚îÇ   ‚îú‚îÄ‚îÄ agent_service.dart
‚îÇ   ‚îú‚îÄ‚îÄ mcp_service.dart
‚îÇ   ‚îî‚îÄ‚îÄ services.dart (GetIt registration)
‚îú‚îÄ‚îÄ components/       # UI Components Layer
‚îÇ   ‚îú‚îÄ‚îÄ agents/
‚îÇ   ‚îú‚îÄ‚îÄ mcp/
‚îÇ   ‚îî‚îÄ‚îÄ common/
‚îú‚îÄ‚îÄ screens/          # Screen Widgets Layer
‚îÇ   ‚îú‚îÄ‚îÄ agent_list_screen.dart
‚îÇ   ‚îî‚îÄ‚îÄ agent_detail_screen.dart
‚îú‚îÄ‚îÄ api/             # API/Database Layer
‚îÇ   ‚îú‚îÄ‚îÄ deepseek_client.dart
‚îÇ   ‚îî‚îÄ‚îÄ filesystem_client.dart
data/                # JSON Persistence
‚îú‚îÄ‚îÄ agents/
‚îú‚îÄ‚îÄ mcp_servers/
‚îî‚îÄ‚îÄ chat_records/
```

## üèÜ VICTORY CONDITIONS

### ‚úÖ ARCHITECTURAL COMPLIANCE CHECKLIST:
- [ ] All data models extend `ChangeNotifier`
- [ ] All state changes call `notifyListeners()`
- [ ] Services manage collections with `List<DataModel> data`
- [ ] UI components are StatelessWidget by default (StatefulWidget only with justification)
- [ ] ALL screen widgets are StatefulWidget (no StatelessWidget screens allowed)
- [ ] Screens use strategically positioned `ListenableBuilder`
- [ ] GetIt manages all service dependencies
- [ ] Models handle their own JSON persistence
- [ ] Stack traces bubble to console output
- [ ] Navigation passes whole models as props
- [ ] API clients focus on transport only

### ‚úÖ SINGLE SOURCE OF TRUTH COMPLIANCE CHECKLIST:
- [ ] All components receive whole object instances (never individual fields)
- [ ] Zero data duplication across the entire application
- [ ] All object mutations happen on the original instance
- [ ] All navigation passes complete objects (never serialized data)
- [ ] All services manage object references, not copies
- [ ] All wrappers receive and pass whole objects
- [ ] All method parameters are objects, not extracted fields
- [ ] All UI components operate on the same object instances
- [ ] All callbacks pass whole objects (never individual fields)
- [ ] All inter-screen communication uses object references
- [ ] All global state management uses object references
- [ ] Zero field extraction patterns across the codebase
- [ ] Zero data transposition patterns across the codebase
- [ ] Zero object copy creation patterns across the codebase

### ‚úÖ OBJECT-ORIENTED DESIGN COMPLIANCE CHECKLIST:
- [ ] All models provide direct mutation methods
- [ ] All services use object-oriented business logic
- [ ] All components use object-oriented callback patterns
- [ ] All screens use object-oriented navigation patterns
- [ ] All data validation operates on complete objects
- [ ] All persistence operations use object self-management
- [ ] All relationship management uses object references
- [ ] All state broadcasting uses object ChangeNotifier patterns

**‚ö∞Ô∏è TOTAL ARCHITECTURAL COMPLIANCE + SINGLE SOURCE OF TRUTH OR DEFEAT! ‚ö∞Ô∏è**
