---
description: When a bug is reported, follow these steps in order to resolve it
globs: 
alwaysApply: false
---
# ⚔️ ELITE BUG FIXING WARRIOR PROTOCOL ⚔️

## 🎯 ULTIMATE MISSION
**🏆 DOMINATE BUGS. CRUSH REGRESSIONS. ACHIEVE LEGENDARY STATUS. 🏆**

This document defines the mandatory bug-fixing protocol for VibeCoder following **Elite Warrior Standards** with zero tolerance for failing tests or linter errors.

## 💀 MANDATORY BUG FIXING STEPS [NO EXCEPTIONS]

### 1. ⚔️ REPRODUCE THE BUG [MANDATORY FIRST]
**RULE**: Every bug MUST be reproduced before any code changes.

#### 🎯 REPRODUCTION REQUIREMENTS:
- Follow exact steps from bug report
- Use same data/environment conditions
- Document all reproduction steps
- Verify bug behavior matches report

#### 🚫 BANNED PRACTICES:
- Blind fixes without reproduction
- Assumptions about bug behavior
- Skipping steps in reproduction

### 2. 🧪 CREATE FAILING TEST [CRITICAL]
**RULE**: Write test BEFORE fixing the bug.

#### 🎯 TEST REQUIREMENTS:
- Test MUST fail initially
- Test MUST be focused on ONLY this bug
- Test MUST be minimal and precise
- Test MUST follow user's reproduction steps
- Test MUST NOT modify existing tests unless flawed logic proven

#### 💻 TEST IMPLEMENTATION:
```dart
// ✅ WARRIOR APPROVED: Focused bug test
test('🛡️ REGRESSION: Widget fails when data is null', () {
  final widget = MyWidget(data: null);
  expect(() => widget.build(context), throwsException);
});

// ❌ BANNED: Modifying existing tests without reason
test('existing test modified without justification', () {
  // CRIME: Changing working tests
});
```

### 3. 🔧 IMPLEMENT FIX [SURGICAL PRECISION]
**RULE**: Write minimal code to make test pass.

#### 🎯 FIX REQUIREMENTS:
- Follow architecture.mdc and flutter_architecture.mdc
- Implement cleanest solution
- Focus ONLY on this specific bug
- No unrelated changes

#### 💻 FIX IMPLEMENTATION:
```dart
// ✅ WARRIOR APPROVED: Clean focused fix
class MyWidget extends StatelessWidget {
  final Data? data;
  
  @override
  Widget build(BuildContext context) {
    if (data == null) return Container(); // Clean null check
    return buildContent();
  }
}

// ❌ BANNED: Unfocused fixes
class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    try {
      // CRIME: Hiding errors instead of fixing root cause
      return buildContent();
    } catch (e) {
      return Container();
    }
  }
}
```

### 4. ✅ VERIFY FIX [ZERO TOLERANCE]
**RULE**: Systematic verification with linter-first approach. No exceptions.

#### 🎯 MANDATORY VERIFICATION SEQUENCE:
1. **🔍 LINTER SCAN FIRST**: `flutter analyze` → MUST show "No issues found!"
   - **💀 COMPILATION REALITY**: Linter errors prevent test execution
   - **⚔️ FIX ORDER**: Errors first → Warnings second → Tests last
   - **🛡️ GATE KEEPER**: Code must compile before any functionality testing
2. **🧪 TEST EXECUTION**: `flutter test` → ONLY after perfect linting
   - New regression test passes
   - All existing tests pass
   - Zero test failures or errors
3. **🎯 FUNCTIONAL VERIFICATION**: Bug fix verified in same environment as reproduction

#### 🚫 BANNED PRACTICES:
- **💀 PREMATURE TEST EXECUTION**: Running tests with active linter errors (INSTANT FAILURE)
- **🚫 COMPILATION BYPASS**: Attempting to test non-compiling code
- Ignoring failing tests
- Suppressing linter errors instead of fixing them
- Skipping linter analysis before test runs
- **💀 SEQUENCE VIOLATION**: Any attempt to run tests before "No issues found!" message

### 5. 🏰 SECURE THE FORTRESS [PERMANENT PROTECTION]
**RULE**: The regression test MUST be permanent.

#### 🎯 PERMANENCE REQUIREMENTS:
- The new test created in Step 2 is committed to the codebase.
- The test is not a temporary diagnostic and provides permanent regression protection.
- Deleting regression tests is a critical violation of the **PERMANENT TEST FORTRESS PROTOCOL**.

## 🏆 VICTORY CONDITIONS

### ✅ MANDATORY COMPLIANCE:
- [ ] Bug reproduced and documented
- [ ] Failing test written
- [ ] Fix implemented following architecture standards
- [ ] **LINTER PERFECT**: `flutter analyze` shows "No issues found!" (PREREQUISITE)
- [ ] **TESTS PERFECT**: All tests passing (executed AFTER linter clean)
- [ ] Regression test is permanent and committed

### 💀 INSTANT FAILURE CONDITIONS:
- **LINTER VIOLATIONS**: Any errors or warnings in `flutter analyze`
- **PREMATURE TEST EXECUTION**: Running tests before fixing linter errors (CRITICAL VIOLATION)
- **COMPILATION FAILURE**: Attempting to test code that won't compile
- Failing tests in codebase
- Modified tests without justification
- Blind fixes without reproduction
- **SEQUENCE VIOLATION**: Any deviation from linter → test order

**⚰️ PERFECT TESTS OR DEATH! ⚰️**
