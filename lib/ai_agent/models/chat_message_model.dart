import 'package:vibe_coder/ai_agent/helpers.dart';
import 'package:vibe_coder/ai_agent/models/ai_agent_enums.dart';

/// Represents a message in the chat completion request.
///
/// Messages can be of different roles:
/// - system: Provides instructions to the model
/// - user: Contains user input
/// - assistant: Contains model responses
/// - tool: Contains tool responses
class ChatMessage {
  /// The role of the message author.
  final MessageRole role;

  /// The contents of the message. Can be null for tool messages.
  String? content;

  /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
  final String? name;

  /// (Beta) Set this to true to force the model to start its answer by the content of the supplied prefix in this assistant message.
  /// You must set base_url="https://api.deepseek.com/beta" to use this feature.
  final bool? prefix;

  /// (Beta) Used for the deepseek-reasoner model in the Chat Prefix Completion feature as the input for the CoT in the last assistant message.
  /// When using this feature, the prefix parameter must be set to true.
  String? reasoningContent;

  /// The tool calls generated by the model, such as function calls.
  final List<Map<String, dynamic>>? toolCalls;

  /// Tool call that this message is responding to.
  final String? toolCallId;

  final String? contextId;

  ChatMessage({
    required this.role,
    this.content,
    this.name,
    this.prefix,
    this.reasoningContent,
    this.toolCalls,
    this.toolCallId,
    this.contextId,
  });

  Map<String, dynamic> toJson() => {
        'role': role.toString().split('.').last,
        if (content != null) 'content': content,
        if (name != null) 'name': name,
        if (prefix != null) 'prefix': prefix,
        if (reasoningContent != null) 'reasoning_content': reasoningContent,
        if (toolCalls != null) 'tool_calls': toolCalls,
        if (toolCallId != null) 'tool_call_id': toolCallId,
      };

  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    List<Map<String, dynamic>>? processedToolCalls;
    if (json['tool_calls'] != null) {
      processedToolCalls = (json['tool_calls'] as List)
          .map((tc) => Map<String, dynamic>.from(tc as Map))
          .toList();
    }

    return ChatMessage(
      role: roleFromString(json['role'] as String),
      content: json['content'] as String?,
      name: json['name'] as String?,
      toolCalls: processedToolCalls,
      toolCallId: json['tool_call_id'] as String?,
      prefix: json['prefix'] as bool? ?? false,
      reasoningContent: json['reasoning_content'] as String?,
    );
  }
}