import 'package:vibe_coder/ai_agent/models/ai_agent_enums.dart';
import 'package:vibe_coder/ai_agent/models/chat_message_model.dart';

/// Represents a choice in the chat completion response.
class ChatCompletionChoice {
  /// The index of the choice in the list of choices.
  final int index;

  /// A chat completion message generated by the model.
  final ChatMessage message;

  /// The reason the model stopped generating tokens.
  final FinishReason? finishReason;

  /// Log probability information for the choice.
  final Map<String, dynamic>? logprobs;

  ChatCompletionChoice({
    required this.index,
    required this.message,
    this.finishReason,
    this.logprobs,
  });

  factory ChatCompletionChoice.fromJson(Map<String, dynamic> json) {
    // Convert string finish reason to enum
    FinishReason? finishReason;
    if (json['finish_reason'] != null) {
      final finishReasonStr = json['finish_reason'] as String;

      // Map API response strings to enum values
      switch (finishReasonStr) {
        case 'stop':
          finishReason = FinishReason.stop;
          break;
        case 'length':
          finishReason = FinishReason.length;
          break;
        case 'content_filter':
          finishReason = FinishReason.contentFilter;
          break;
        case 'tool_calls':
          finishReason = FinishReason.toolCalls;
          break;
        case 'insufficient_system_resource':
          finishReason = FinishReason.insufficientSystemResource;
          break;
        default:
          finishReason = FinishReason.stop;
      }
    }

    return ChatCompletionChoice(
      index: json['index'] as int,
      message: ChatMessage.fromJson(json['message'] as Map<String, dynamic>),
      finishReason: finishReason,
      logprobs: json['logprobs'] as Map<String, dynamic>?,
    );
  }

  /// Converts the choice to a JSON-serializable map.
  /// Used for debugging purposes.
  Map<String, dynamic> toJson() {
    return {
      'index': index,
      'message': message.toJson(),
      'finish_reason': finishReason?.toString().split('.').last,
      if (logprobs != null) 'logprobs': logprobs,
    };
  }
}
